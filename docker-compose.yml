version: "3.3"
services:
  btcpool:
    image: "btccom/btcpool-btc:latest"
    ports:
      - "1800:1800" # sserver
      - "8080:8080" # statshttpd
      - "8081:8081" # slparserhttpd
    depends_on:
      - zookeeper
      - kafka
    volumes:
      - "./volumes/btcpool/:/work/config"
    command: ["sserver", "-c", "/work/config/sserver.cfg"]
    networks:
      - default

  ckb_node:
    image: "nervos/ckb"
    ports: 
      - "8114:8114"
      - "8115:8115"
    environment:
      CKB_CHAIN: "mainnet"
    volumes:
      - "./volumes/ckb/:/var/lib/ckb/"
    command: ["run"]

  zookeeper:
    image: confluentinc/cp-zookeeper:5.5.1
    ports:
      - "127.0.0.1:2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - default

  kafka:
    image: confluentinc/cp-kafka:5.5.1
    depends_on:
      - zookeeper
    ports:
      - "127.0.0.1:9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: "kafka:9092"
      KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - default

  user-list:
    build: ./user-list
    ports:
      - "8000:8000"
    networks:
      - default
    restart: always

  mysql:
    image: mariadb
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
    command: --log-error=/var/log/mysql/mysql.log
    volumes:
      - ./data/mysql/data:/var/lib/mysql
      - ./data/mysql/sql:/docker-entrypoint-initdb.d
      - ./data/mysql/log:/var/log/mysql
    restart: always

  redis:
    image: redis:latest
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - $HOME/redis/data/db:/data/db
    networks:
      - default

#  proxy:
#    image: traefik:v2.2
#    networks:
#      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#      - default
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#    command:
#      # Enable Docker in Traefik, so that it reads labels from Docker services
#      - --providers.docker
#      # Add a constraint to only use services with the label for this stack
#      # from the env var TRAEFIK_TAG
#      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
#      # Do not expose all Docker services, only the ones explicitly exposed
#      - --providers.docker.exposedbydefault=false
#      # Enable Docker Swarm mode
#      - --providers.docker.swarmmode
#      # Enable the access log, with HTTP requests
#      - --accesslog
#      # Enable the Traefik log, for configurations and errors
#      - --log
#      # Enable the Dashboard and API
#      - --api
#    deploy:
#      placement:
#        constraints:
#          - node.role == manager
#      labels:
#        # Enable Traefik for this service, to make it available in the public network
#        - traefik.enable=true
#        # Use the traefik-public network (declared below)
#        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#        # Use the custom label "traefik.constraint-label=traefik-public"
#        # This public Traefik will only use services with this label
#        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
#        # traefik-http set up only to use the middleware to redirect to https
#        - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
#        - traefik.http.middlewares.${STACK_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
#        # Handle host with and without "www" to redirect to only one of them
#        # Uses environment variable DOMAIN
#        # To disable www redirection remove the Host() you want to discard, here and
#        # below for HTTPS
#        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
#        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.entrypoints=http
#        # traefik-https the actual router using HTTPS
#        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
#        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.entrypoints=https
#        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls=true
#        # Use the "le" (Let's Encrypt) resolver created below
#        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.tls.certresolver=le
#        # Define the port inside of the Docker service to use
#        - traefik.http.services.${STACK_NAME?Variable not set}-proxy.loadbalancer.server.port=80
#        # Handle domain with and without "www" to redirect to only one
#        # To disable www redirection remove the next line
#        - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
#        # Redirect a domain with www to non-www
#        # To disable it remove the next line
#        - traefik.http.middlewares.${STACK_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
#        # Redirect a domain without www to www
#        # To enable it remove the previous line and uncomment the next
#        # - traefik.http.middlewares.${STACK_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
#        # Middleware to redirect www, to disable it remove the next line
#        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-https.middlewares=${STACK_NAME?Variable not set}-www-redirect
#        # Middleware to redirect www, and redirect HTTP to HTTPS
#        # to disable www redirection remove the section: ${STACK_NAME?Variable not set}-www-redirect,
#        - traefik.http.routers.${STACK_NAME?Variable not set}-proxy-http.middlewares=${STACK_NAME?Variable not set}-www-redirect,${STACK_NAME?Variable not set}-https-redirect

#  filebeat:
#    image: 'filebeat:${TAG-latest}'
#    depends_on:
#      - backend
#    env_file:
#      - .env
##    environment:
##      - SERVER_NAME=${DOMAIN?Variable not set}
##      - SERVER_HOST=https://${DOMAIN?Variable not set}
##      # Allow explicit env var override for tests
##      - SMTP_HOST=${SMTP_HOST}
#    build:
#      context: ./backend
#      dockerfile: filebeat.dockerfile
#      args:
#        INSTALL_DEV: ${INSTALL_DEV-false}
##    deploy:
##      labels:
##        - traefik.enable=true
##        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
##        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
##        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
#    networks:
#      - default

#  prometheus:
#    image: prom/prometheus:v2.22.0
#    container_name: prometheus
#    volumes:
#      - ./prometheus:/etc/prometheus
#      - prometheus_data:/prometheus
#    command:
#      - '--config.file=/etc/prometheus/prometheus.yml'
#      - '--storage.tsdb.path=/prometheus'
#      - '--web.console.libraries=/etc/prometheus/console_libraries'
#      - '--web.console.templates=/etc/prometheus/consoles'
#      - '--storage.tsdb.retention.time=200h'
#      - '--web.enable-lifecycle'
#    restart: unless-stopped
#    expose:
#      - 9090
#    networks:
#      - monitor-net
#    labels:
#      org.label-schema.group: "monitoring"
#
#  alertmanager:
#    image: prom/alertmanager:v0.21.0
#    container_name: alertmanager
#    volumes:
#      - ./alertmanager:/etc/alertmanager
#    command:
#      - '--config.file=/etc/alertmanager/config.yml'
#      - '--storage.path=/alertmanager'
#    restart: unless-stopped
#    expose:
#      - 9093
#    networks:
#      - monitor-net
#    labels:
#      org.label-schema.group: "monitoring"
#
#  nodeexporter:
#    image: prom/node-exporter:v1.0.1
#    container_name: nodeexporter
#    volumes:
#      - /proc:/host/proc:ro
#      - /sys:/host/sys:ro
#      - /:/rootfs:ro
#    command:
#      - '--path.procfs=/host/proc'
#      - '--path.rootfs=/rootfs'
#      - '--path.sysfs=/host/sys'
#      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
#    restart: unless-stopped
#    expose:
#      - 9100
#    networks:
#      - monitor-net
#    labels:
#      org.label-schema.group: "monitoring"
#
#  cadvisor:
#    image: gcr.io/cadvisor/cadvisor:v0.37.0
#    container_name: cadvisor
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker:/var/lib/docker:ro
#      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
#    restart: unless-stopped
#    expose:
#      - 8080
#    networks:
#      - monitor-net
#    labels:
#      org.label-schema.group: "monitoring"
#
#  grafana:
#    image: grafana/grafana:7.2.1
#    container_name: grafana
#    volumes:
#      - grafana_data:/var/lib/grafana
#      - ./grafana/provisioning:/etc/grafana/provisioning
#    environment:
#      - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
#      - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
#      - GF_USERS_ALLOW_SIGN_UP=false
#    restart: unless-stopped
#    expose:
#      - 3000
#    networks:
#      - monitor-net
#    labels:
#      org.label-schema.group: "monitoring"


volumes:
  app-db-data: {}
  prometheus_data: {}
  grafana_data: {}

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: ${TRAEFIK_PUBLIC_NETWORK_IS_EXTERNAL-true}
    
  monitor-net:
    driver: bridge
